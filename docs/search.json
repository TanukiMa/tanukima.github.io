[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "魔狸",
    "section": "",
    "text": "自己紹介\n（自称）（ 日本内科学会 認定）ブラッド・ピット兼ポケモンGoトレーナー・医畜（総合内科・周術期内科・ER・ICU・CCU・HCU・ICD・PCT）兼セレブ（自治体認定済）、FJSIM（Fellow of the Japanese Society of Internal Medicine ; 総合内科専門医）、ICD（Infection Control Doctor）。最近は 大学生の卒論指導も。主な訳書に「データ匿名化手法」 、「実践バイオインフォマティクス」、「バイオインフォマティクスのためのPerl入門」など。 監訳協力に「AIファースト・ヘルスケア ―医療現場におけるAIアプリケーションの利用」。\n\n\n日々の記録\n最近、一箇所に何かを纏めて書くということが無く、 日々の記録が途絶えがちになってきたので、 GitHub Pagesと quartoを活用していくことにした。\nPowerPointも作れるし、 当面quartoとお付き合いしようと思う。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntasksch\n\n\n\n\n\n\nWindows\n\n\nPowerShell\n\n\n\n\n\n\n\n\n\n2024/10/24\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nmozc4med\n\n\n\n\n\n\n医療\n\n\nMozc\n\n\nWindows\n\n\nMacOS\n\n\n\n\n\n\n\n\n\n2024/10/12\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nT Shirts Designer Debut!\n\n\n\n\n\n\n医療\n\n\n\n\n\n\n\n\n\n2024/10/12\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\n魔狸アンテナ 再始動しました！\n\n\n\n\n\n\n医療\n\n\npython\n\n\nmariadb\n\n\nSQL\n\n\nGitHub\n\n\nDebian GNU/Linux\n\n\n\n\n\n\n\n\n\n2024/10/12\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nmariadb\n\n\n\n\n\n\nmariadb\n\n\n\n\n\n\n\n\n\n2024/09/25\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nllmとかgptel\n\n\n\n\n\n\nllm\n\n\nWindows\n\n\nEmacs\n\n\nMacOS\n\n\n\n\n\n\n\n\n\n2024/09/24\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nLast-Modified.js\n\n\n\n\n\n\nJavaScript\n\n\nquarto\n\n\n\n\n\n\n\n\n\n2024/09/17\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\nwingetとscoopでWindows環境を移行、Visual Studio環境の移行\n\n\n\n\n\n\nWindows\n\n\nwinget\n\n\nscoop\n\n\nVisual Studio\n\n\n\n\n\n\n\n\n\n2024/09/15\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\n読書「愛の顛末」\n\n\n\n\n\n\n読書\n\n\n\n\n\n\n\n\n\n2024/09/14\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nquarto記法でカレンダー\n\n\n\n\n\n\nquarto\n\n\npython\n\n\n\n\n\n\n\n\n\n2024/09/14\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nquarto\n\n\n\n\n\n\nWindows\n\n\nMacOS\n\n\nwinget\n\n\nhomebrew\n\n\n\n\n\n\n\n\n\n2024/09/09\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\nZotero\n\n\n\n\n\n\n文献管理\n\n\nZotero\n\n\nWindows\n\n\nMacOS\n\n\nwinget\n\n\nhomebrew\n\n\n\n\n\n\n\n\n\n2024/09/08\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\nWSL2小技\n\n\n\n\n\n\nWindows\n\n\nWSL2\n\n\nDebian GNU/Linux\n\n\nRust\n\n\n\n\n\n\n\n\n\n2024/09/08\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\nPowerPoint with quarto\n\n\n\n\n\n\nquarto\n\n\nPowerPoint\n\n\n\n\n\n\n\n\n\n2024/09/08\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nStirling PDF\n\n\n\n\n\n\nPDF\n\n\nWindows\n\n\nscoop\n\n\n\n\n\n\n\n\n\n2024/09/08\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\ntailscale\n\n\n\n\n\n\nnetworking\n\n\nWindows\n\n\nMacOS\n\n\nLinux\n\n\nDebian GNU/Linux\n\n\nwinget\n\n\nhomebrew\n\n\n\n\n\n\n\n\n\n2024/09/08\n\n\n魔狸\n\n\n\n\n\n\n\n\n\n\n\n\nBlogなのか？\n\n\n\n\n\n\n魔狸\n\n\nquarto\n\n\nGitHub\n\n\nmermaid\n\n\nGraphviz\n\n\n\n\n\n\n\n\n\n2024/09/07\n\n\nMa, Tanuki\n\n\n\n\n\n\n\n\n\n\n\n\nWindows パッケージング・システム HOWTO\n\n\n\n\n\n\nWindows\n\n\nwinget\n\n\nscoop\n\n\n\n\n\n\n\n\n\n2024/09/07\n\n\nMa, Tanuki\n\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "posts/2024/09/tailscale.html",
    "href": "posts/2024/09/tailscale.html",
    "title": "tailscale",
    "section": "",
    "text": "昔はOpenVPN網を構築するのが面倒だったなぁ…（遠い目）\n今は tailscaleが 便利すぎる。\ntailscaleについては、WikiPediaが詳しい。\nwireguardベースなので、OpenVPNに比較して高速。kernel baseなのでセキュリティ関係で配慮が必要。\n\nWindowsでtailscale\nwinget install -e tailscale\n\n\nMacOSでtailscale\nbrew install tailscale --cask\n\n\nDebian GNU/Linuxでtailscale\nhttps://tailscale.com/kb/1031/install-linux の当該項目参照。"
  },
  {
    "objectID": "posts/2024/09/StirlingPDF.html",
    "href": "posts/2024/09/StirlingPDF.html",
    "title": "Stirling PDF",
    "section": "",
    "text": "PDFの処理に Acrobat Proは必要ですか？ 電子書類保存法が施行されたのと関連するのか、年々ライセンスが高騰していくのが気になります。\nたかが、スタンプを押したりするだけですよ？\n私のような臍曲りの需要を満たしてくれるのが、Stirling PDFです。\n一方で、記入可能なPDFフォームを備えたPDFの作成は、 LibreOfficeで一応可能ですが、万人が満足できる？と問われると疑問符が付きます。\nTeXでPDFフォームを扱うpackageは CTANにありますが、TeX故の困難さが付き纏います。\nTypstは、これらを解決してくれるのでしょうか？"
  },
  {
    "objectID": "posts/2024/09/StirlingPDF.html#port-8080",
    "href": "posts/2024/09/StirlingPDF.html#port-8080",
    "title": "Stirling PDF",
    "section": "port 8080",
    "text": "port 8080\nStirling PDFはyaws経由で動作しますが、標準ではTCPの8080番ポートを使おうとします。他のアプリケーションがTCPの8080番を使っている場合は、Stirling PDFの画面が表示されません。\n\n解\n$HOME/scoop/persist-pdf/configs/custom_settings.yml を編集する。 下記は、port 18080を使用する場合。\nserver:\n  host: localhost #(Can skip if don't want to add any).\n  port: 18080 #(or whatever new port you want)\nfrom https://github.com/Stirling-Tools/Stirling-PDF/issues/1173"
  },
  {
    "objectID": "posts/2024/09/StirlingPDF.html#メニューetc.が日本語表示されない",
    "href": "posts/2024/09/StirlingPDF.html#メニューetc.が日本語表示されない",
    "title": "Stirling PDF",
    "section": "メニューetc.が日本語表示されない",
    "text": "メニューetc.が日本語表示されない\n\n解1\nhttps://127.0.0.1:8080/?lang=ja-JP にアクセス\n\n\n解2\n$HOME/scoop/persist/stirling-pdf/configs/settings.ymlを編集する\ndefaultLocale ja-JP\nにして再起動。\nfrom https://x.com/lempickaau/status/1831876285980930073\n\n\n\n日本語化したStirling PDF"
  },
  {
    "objectID": "posts/2024/09/llm.html",
    "href": "posts/2024/09/llm.html",
    "title": "llmとかgptel",
    "section": "",
    "text": "Windowsで llm 関係アプリを一括してインストール。当然wingetを使う。"
  },
  {
    "objectID": "posts/2024/09/llm.html#emacs.dinit.el",
    "href": "posts/2024/09/llm.html#emacs.dinit.el",
    "title": "llmとかgptel",
    "section": "~/.emacs.d/init.el",
    "text": "~/.emacs.d/init.el\n(gptel-make-gemini \"Gemini\" :key \"Gemini_API_KEY\" :stream t)\n;; OPTIONAL configuration\n(setq\n;; gptel-model \"gemini-pro\"\n gptel-model \"gemini-1.5-pro-latest\"\n gptel-backend (gptel-make-gemini \"Gemini\"\n                 :key \"Gemini_API_KEY\"\nを設定します。"
  },
  {
    "objectID": "posts/2024/09/llm.html#emacsからgeminiに質問してみた",
    "href": "posts/2024/09/llm.html#emacsからgeminiに質問してみた",
    "title": "llmとかgptel",
    "section": "EmacsからGeminiに質問してみた",
    "text": "EmacsからGeminiに質問してみた\n結果。"
  },
  {
    "objectID": "posts/2024/09/llm.html#footnotes",
    "href": "posts/2024/09/llm.html#footnotes",
    "title": "llmとかgptel",
    "section": "脚注",
    "text": "脚注\n\n\nだからどうした↩︎"
  },
  {
    "objectID": "posts/2024/09/WSL2.html",
    "href": "posts/2024/09/WSL2.html",
    "title": "WSL2小技",
    "section": "",
    "text": "Windows Subsystem for Linux、 所謂 WSL2は便利ですねー\n私は wsl-distrodを使っています。\n\nGoogle Driveをmount\nGoogle Driveを動作させているWindowsがhostならば、 WSL2コンテナ内で\nsudo mount -t drvfs H: /mnt/h\nすれば、Hドライブに割り振られているGoogle Driveが WSL2コンテナの /mnt/h にmountされます。\nWSL2の起動時に自動でmountするためには、 rootのcrontabに\n@reboot     mount -t drvfs H: /mnt/h\nと書く。\n\n\ncommand lineやshellからGoogle Driveを操作する\nRustで書かれた google-drive-3-cliを使うのが一つの手かもしれません。\nrust-msvcを使えば、 WoA(Windows On Arm)でもbuild、動作します。"
  },
  {
    "objectID": "posts/2024/09/quarto.html",
    "href": "posts/2024/09/quarto.html",
    "title": "quarto",
    "section": "",
    "text": "色々な文書を作成する機会が多いです。\n正直、辟易としています。\n昭和のガリ版印刷を引きずったような汚いフォント、歪んだ罫線、構成力も校正力も欠けている文章。\nPDF化されているのに、印刷して記入して、スキャンして取り込む？\nそんな不思議なことが平然とまかり通っているのが、日本の医療の現場です。\n医療の情報化を通じて効率化を推進していきたいと常々考えています。\n\nMermaid で Gantt chart\n\n\n\n\n\ngantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html",
    "href": "posts/2024/09/1st-winget.html",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "",
    "text": "必要に迫られて普段使っていなかったアプリケーションを起動させると 最新版がリリースされていて、そのアップデートで時間が消費されるのは無駄と思う。\nLinuxでは20年以上前から、MacOSでも10年前から当たり前だった パッケージング・システムがWindowsでも普及してきた。\nパッケージングシステムを使いこなすことで、Windows環境を常に最新にしよう。\nschtasksコマンドやlogon scriptで パッケージングシステムを起動させれば、定期的に最新の環境を整えることができる。"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html#各種パッケージングシステムを使いこなせ",
    "href": "posts/2024/09/1st-winget.html#各種パッケージングシステムを使いこなせ",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "",
    "text": "必要に迫られて普段使っていなかったアプリケーションを起動させると 最新版がリリースされていて、そのアップデートで時間が消費されるのは無駄と思う。\nLinuxでは20年以上前から、MacOSでも10年前から当たり前だった パッケージング・システムがWindowsでも普及してきた。\nパッケージングシステムを使いこなすことで、Windows環境を常に最新にしよう。\nschtasksコマンドやlogon scriptで パッケージングシステムを起動させれば、定期的に最新の環境を整えることができる。"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html#まずはscoop",
    "href": "posts/2024/09/1st-winget.html#まずはscoop",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "まずはscoop",
    "text": "まずはscoop\nhttp://scoop.sh/\nwebの通りにインストールする。\n一般ユーザ権限で動作し、インストールしたアプリは ホームディレクトリのscoop 以下に収納される。\nasciidoc環境を整えてみよう。\nscoop search asciidoc\n'extras' bucket:\n    asciidocfx (1.7.4)\n\n'main' bucket:\n    asciidoctorj (2.5.4)\nJavaで実装されている asciidoctorj をインストールしてみよう。\nasciidoctorjの情報を見る。\nscoop info asciidoctorj\nasciidoctorjをインストールする。\nscoop install asciidoctorj\nscoopでどんなアプリケーションをインストールしたか確認する。\nscoop list\nInstalled apps:\n\nName               Version          Source   Updated             Info\n----               -------          ------   -------             ----\n7zip               22.00            main     2022-06-20 09:41:18\naria2              1.36.0-1         main     2022-05-19 10:19:22\nasciidoctorj       2.5.4            main     2022-07-05 19:01:24\natom               1.60.0           extras   2022-05-19 10:20:56\nbusybox            4716-g31467ddfc  main     2022-06-11 09:46:46\ncacert             2022-04-26       main     2022-05-19 10:21:05\nclink              1.3.33           main     2022-07-01 15:12:58\ndark               3.11.2           main     2022-05-19 10:21:12\nexiftool           12.42            main     2022-06-02 08:41:16\nfile               5.38             main     2022-05-19 10:21:19\nghostscript        9.56.1           main     2022-05-19 10:21:55\ngit                2.37.0.windows.1 main     2022-07-01 15:13:24\ngooglechrome       103.0.5060.66    extras   2022-07-01 15:13:44\nhaskell-cabal      3.6.2.0          main     2022-05-19 10:22:19\niconv              1.14-3           main     2022-05-19 10:22:34\nimagemagick-ffmpeg 7.1.0-37         versions 2022-06-08 09:00:24\ninnounp            0.50             main     2022-05-19 10:22:41\nlessmsi            1.10.0           main     2022-05-19 10:23:19\nmysql-workbench    8.0.29           main     2022-04-30 17:10:02\nnkf                2.1.5.1          jp       2022-04-11 11:25:37\npandoc             2.18             main     2022-04-05 08:58:47\npdftk              2.02             main     2022-04-05 12:23:20\nprocs              0.12.3           main     2022-05-27 09:12:34\npython             3.10.5           main     2022-06-08 09:02:35\nrclone             1.58.1           main     2022-05-30 22:14:14\nrclone-browser     1.8.0            extras   2022-05-30 22:14:23\nruby               3.1.2-1          main     2022-04-22 08:45:36\nstunnel            5.64             extras   2022-06-07 16:07:12\nsudo               0.2020.01.26     main     2021-12-16 18:10:19\nvagrant            2.2.19           main     2022-04-15 16:09:16\nvagrant-manager    2.3.2            extras   2022-04-15 16:09:40\nvlc                3.0.17.4         extras   2022-04-22 08:46:33\nvscode             1.68.1           extras   2022-06-17 09:40:40\nvswhere            3.0.3            main     2022-06-03 09:47:31\nwget               1.21.3           main     2022-03-14 09:07:17\nzoom               5.11.1.6602      extras   2022-07-01 15:14:02\nzotero             6.0.9            extras   2022-06-25 11:18:32\ncygwin             2.918            main     2022-03-14 09:15:04 Global install"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html#winget",
    "href": "posts/2024/09/1st-winget.html#winget",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "winget",
    "text": "winget\nwingetはMicrosoftｻﾏが自ら手がけているパッケージング・システムだ。 Windows 10 1709(build 16299)以降で使える。 まだまだ開発途上であり、よくエラーが出るが、気にしないことにする。\ncmd.exeを開いて、\n$ winget upgrade --all\nとすることで、wingetでインストールしたアプリケーション類が一括してアップグレードできる。"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html#chocolatey",
    "href": "posts/2024/09/1st-winget.html#chocolatey",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "chocolatey",
    "text": "chocolatey\nhttps://chocolatey.org/\n基本的に管理者権限で動作するので、scoopでsudoをインストールしておくとスムーズだろう。\n$ scoop install sudo"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html#tex-live",
    "href": "posts/2024/09/1st-winget.html#tex-live",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "TeX Live",
    "text": "TeX Live\nhttps://www.tug.org/texlive/ 綺麗な文書作成のためには、TeX Liveに限る！\nドキュメント通りにインストール。 参考： https://texwiki.texjp.org/?TeX%20Live%2FWindows\n$ tlmgr update --self --all\nで、更新される。"
  },
  {
    "objectID": "posts/2024/09/1st-winget.html#どのアプリをどのパッケージングシステムで管理する",
    "href": "posts/2024/09/1st-winget.html#どのアプリをどのパッケージングシステムで管理する",
    "title": "Windows パッケージング・システム HOWTO",
    "section": "どのアプリをどのパッケージング・システムで管理する？",
    "text": "どのアプリをどのパッケージング・システムで管理する？\nAdobe Acrobat Reader DC（64-bit） は chocolatey、scoopでは提供されていないが、wingetなら導入できる。\n$ winget search acrobat\n名前                             ID                          バージョン   一致         ソース\n----------------------------------------------------------------------------------------------\nAdobe Acrobat Reader DC          XPDP273C0XHQH2              Unknown                   msstore\nBlossX Acrobat 11 - PDF Editor   9P51586BZKNG                Unknown                   msstore\nAdobe Acrobat Reader DC (64-bit) Adobe.Acrobat.Reader.64-bit 22.001.20117 Tag: acrobat winget\nAdobe Acrobat Reader DC          Adobe.Acrobat.Reader.32-bit 22.001.20117 Tag: acrobat winget\n$ winget install Adobe.Acrobat.Reader.64-bit"
  },
  {
    "objectID": "posts/2024/09/07.html",
    "href": "posts/2024/09/07.html",
    "title": "Blogなのか？",
    "section": "",
    "text": "最近、一箇所に何かを纏めて書くということが無く、 日々の記録が途絶えがちになってきたので、 GitHub Pagesと quartoを活用していくことにした。\nPowerPointも作れるし、当面quartoとお付き合いしようと思う。"
  },
  {
    "objectID": "posts/2024/09/07.html#mermaid-で-gantt-chart",
    "href": "posts/2024/09/07.html#mermaid-で-gantt-chart",
    "title": "Blogなのか？",
    "section": "Mermaid で Gantt chart",
    "text": "Mermaid で Gantt chart\n\n\n\n\n\ngantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d"
  },
  {
    "objectID": "posts/2024/09/Zotero.html",
    "href": "posts/2024/09/Zotero.html",
    "title": "Zotero",
    "section": "",
    "text": "皆さん、文献管理はどうしていますか？\n私は Zotero を使っています。"
  },
  {
    "objectID": "posts/2024/09/Zotero.html#windowsでzotero",
    "href": "posts/2024/09/Zotero.html#windowsでzotero",
    "title": "Zotero",
    "section": "WindowsでZotero",
    "text": "WindowsでZotero\nwinget ならば、\nwinget install Zotero -a x64 --force\nしましょう。\nオプション-a(= –architecture )でCPU architectureを指定します。デフォルトではx86となるようで、今更32bitアプリを使う必要も無いと思うので、-a x64を指定します。"
  },
  {
    "objectID": "posts/2024/09/Zotero.html#macosでzotero",
    "href": "posts/2024/09/Zotero.html#macosでzotero",
    "title": "Zotero",
    "section": "MacOSでZotero",
    "text": "MacOSでZotero\nHomebrew を使い\nbrew install zotero\nでインストールされます。"
  },
  {
    "objectID": "posts/2024/10/glc.html",
    "href": "posts/2024/10/glc.html",
    "title": "魔狸アンテナ 再始動しました！",
    "section": "",
    "text": "昔々 1 、医療関係のwebsiteのLast-Modifiedを検出して、URLを更新順に並べ、ユーザはCookieでどのURLの更新情報を閲覧するか選べるというサービスを作り 愛媛県医師会 の先生方の御協力を頂き、 日本医師会 から研究助成を頂いたことがあるですが、 サーバ移転・移設に伴い2011年頃にサービスを止めてしまいました。\n医療情報分野で 日本医師会 から研究助成を得たのは日本初だったということで、 愛媛県医師会 としては、末永くサービスを続けて欲しかったようですが、大変申し訳ありませんでした。\nしかし、混沌としたWWWの世界から情報の更新をキャッチするシステムの構築への興味は止めていませんでした。\n数年前にもスクレイピングをベースにして、約50URLsの更新を検知するシステムを作っていたのですが、根本的な箇所にエラーがあり、停止していました。\nこの度、 Debian GNU/Linux 上で MariaDB 、 Python、 quarto を使い持続的に医療関係のURLの更新を検知し、その結果はGitHub上で閲覧可能にしました。更新が検知されると、 Twitter 、 Mastodon 、 Bluesky に更新情報が投稿されます。"
  },
  {
    "objectID": "posts/2024/10/glc.html#url-は",
    "href": "posts/2024/10/glc.html#url-は",
    "title": "魔狸アンテナ 再始動しました！",
    "section": "URL は",
    "text": "URL は\nhttps://TanukiMa.github.io/glc/ です。"
  },
  {
    "objectID": "posts/2024/10/glc.html#バグ報告やリクエスト-は",
    "href": "posts/2024/10/glc.html#バグ報告やリクエスト-は",
    "title": "魔狸アンテナ 再始動しました！",
    "section": "バグ報告やリクエスト は",
    "text": "バグ報告やリクエスト は\n「このURLを更新観測対象にしてくれ」などのリクエストやバグ報告は、 https://github.com/TanukiMa/glc/からお願いします。"
  },
  {
    "objectID": "posts/2024/10/glc.html#footnotes",
    "href": "posts/2024/10/glc.html#footnotes",
    "title": "魔狸アンテナ 再始動しました！",
    "section": "脚注",
    "text": "脚注\n\n\n20世紀の終わり頃↩︎"
  },
  {
    "objectID": "posts/2024/10/12.html",
    "href": "posts/2024/10/12.html",
    "title": "T Shirts Designer Debut!",
    "section": "",
    "text": "Tシャツ・デザイナーとしてデビューしました！\nhttps://www.zazzle.co.jp/store/Matanuki?rf=238037105448914807 から下記商品をお買い上げ頂けます！\n\n\n\n\n各ワクチン接種の記念に購入は如何でしょうか？"
  },
  {
    "objectID": "posts/2024/10/tasksch.html",
    "href": "posts/2024/10/tasksch.html",
    "title": "tasksch",
    "section": "",
    "text": "cron便利ですよね。cronで連日の決まった仕事を処理させるために、私はLinuxにハマったと言っても過言ではないです。\nでは、Windowsではcron使える？ Cygwin でcygserverでcronをdaemonizeする？ 面倒ですよね。\nWindowsには タスクスケジューラー なるGUIなcronもどきがあるので、それを使えばいいのですが、GUIが面倒な私です。\ncuiでタスクスケジューラーを叩きます。\nmozc4med-build.ps1 を 毎朝7:00に動作させる例が下記。タスクスケジューラーでの名前はDaily_mozc4medにします。\nschtasks /create /tn \"Daily_mozc4med\" /tr \"powershell.exe -File C:\\Users\\User\\scripts\\mozc4med-build.ps1\" /sc daily /st 07:00 /F\nDaily_mozc4medをtaskschから削除するなら\nschtasks /delete /TN \"Daily_mozc4med\"\nDaily_mozc4medをtaskschから実行するなら\nschtasks /run /tn \"Daily_mozc4med\"\ntaskschを確認\nschtasks /query /fo LIST /v"
  },
  {
    "objectID": "posts/2024/09/14.html",
    "href": "posts/2024/09/14.html",
    "title": "読書「愛の顛末」",
    "section": "",
    "text": "一度読了しているが、本棚から取り出す。\n\n最近、我が家は「文豪ストレイドッグス」ブームであり、 中島敦の名前を聞くことは珍しくない。\n中島敦に関する蘊蓄を垂れるためにも再読する。"
  },
  {
    "objectID": "posts/2024/09/quarto-cal.html",
    "href": "posts/2024/09/quarto-cal.html",
    "title": "quarto記法でカレンダー",
    "section": "",
    "text": "quartoでカレンダーは書けるか？\n\n\nShow the code\nimport calendar\nimport datetime\n\ndef generate_quarto_calendar_code():\n    # 現在の年と月を取得\n    today = datetime.date.today()\n    year = today.year\n    month = today.month\n    \n    # カレンダーオブジェクトを作成\n    cal = calendar.monthcalendar(year, month)\n    \n    # 月の名前を取得（日本語）\n    month_names = [\"睦月\", \"如月\", \"弥生\", \"卯月\", \"皐月\", \"水無月\",\n                   \"文月\", \"葉月\", \"長月\", \"神無月\", \"霜月\", \"師走\"]\n    month_name = month_names[month - 1]\n    \n    # Quarto記法用のMarkdown形式のカレンダーを構築\n    quarto_code = '| 日 | 月 | 火 | 水 | 木 | 金 | 土 |\\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\\n'\n    \n    # 各週の行を生成\n    for week in cal:\n        day_row = '|'\n        for day in week:\n            if day == 0:\n                day_row += ' |'\n            else:\n                style = ''\n                if week.index(day) == 0:  # 日曜日\n                    style = '{style=\"color: red;\"}'\n                elif week.index(day) == 6:  # 土曜日\n                    style = '{style=\"color: deepskyblue;\"}'\n                day_row += f' [{day}]{style} |' if style else f' {day} |'\n        quarto_code += day_row + '\\n'\n    \n    # ヘッダーの挿入\n    quarto_code = f'''---\ntitle: \"{year}年 {month}月 （{month_name}）のカレンダー\"\n---\n\n{quarto_code}\n\n: {year}年{month}月のカレンダー\n'''\n    return quarto_code\n\n# 実行して結果を表示\nprint(generate_quarto_calendar_code())\n\n\n---\ntitle: \"2024年 10月 （神無月）のカレンダー\"\n---\n\n| 日 | 月 | 火 | 水 | 木 | 金 | 土 |\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n| | 1 | 2 | 3 | 4 | 5 | [6]{style=\"color: deepskyblue;\"} |\n| [7]{style=\"color: red;\"} | 8 | 9 | 10 | 11 | 12 | [13]{style=\"color: deepskyblue;\"} |\n| [14]{style=\"color: red;\"} | 15 | 16 | 17 | 18 | 19 | [20]{style=\"color: deepskyblue;\"} |\n| [21]{style=\"color: red;\"} | 22 | 23 | 24 | 25 | 26 | [27]{style=\"color: deepskyblue;\"} |\n| [28]{style=\"color: red;\"} | 29 | 30 | 31 | | | |\n\n\n: 2024年10月のカレンダー\n\n\n\nこんな感じ。\n\n2024年9月のカレンダー\n\n\n\n\n\n\n\n\n\n\n\n日\n月\n火\n水\n木\n金\n土\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n3\n4\n5\n6\n7\n8\n\n\n9\n10\n11\n12\n13\n14\n15\n\n\n16\n17\n18\n19\n20\n21\n22\n\n\n23\n24\n25\n26\n27\n28\n29\n\n\n30"
  },
  {
    "objectID": "posts/2024/09/migrate-windows-env-w-winget.html",
    "href": "posts/2024/09/migrate-windows-env-w-winget.html",
    "title": "wingetとscoopでWindows環境を移行、Visual Studio環境の移行",
    "section": "",
    "text": "Windows上のhyper-Vに開発環境を整えたコンテナを作り、その上でbuildしています。\nこのWindows環境は90日の期限があるので 1 、別のコンテナを作って開発環境を移行します。\nゴミも色々蓄積して、diskも足りなくなるし、NTFSはよく壊れるし、 90日使い捨てWindows環境 は悪くありません。"
  },
  {
    "objectID": "posts/2024/09/migrate-windows-env-w-winget.html#section",
    "href": "posts/2024/09/migrate-windows-env-w-winget.html#section",
    "title": "wingetとscoopでWindows環境を移行、Visual Studio環境の移行",
    "section": "",
    "text": "まずは 移行元で Visual Studio Installer を起動し、menuから “Export configuration” を選択。"
  },
  {
    "objectID": "posts/2024/09/migrate-windows-env-w-winget.html#section-1",
    "href": "posts/2024/09/migrate-windows-env-w-winget.html#section-1",
    "title": "wingetとscoopでWindows環境を移行、Visual Studio環境の移行",
    "section": "",
    "text": "~/Documents/.vsconfig に インストールしているコンポーネント一覧と機能拡張の情報が書き込まれます。"
  },
  {
    "objectID": "posts/2024/09/migrate-windows-env-w-winget.html#section-2",
    "href": "posts/2024/09/migrate-windows-env-w-winget.html#section-2",
    "title": "wingetとscoopでWindows環境を移行、Visual Studio環境の移行",
    "section": "",
    "text": "移行先で Visual Studio Installer を起動し、menuから “Import configuration” を選択。"
  },
  {
    "objectID": "posts/2024/09/migrate-windows-env-w-winget.html#section-3",
    "href": "posts/2024/09/migrate-windows-env-w-winget.html#section-3",
    "title": "wingetとscoopでWindows環境を移行、Visual Studio環境の移行",
    "section": "",
    "text": "Google Driveに移動、vsconfig.vsconfigにrenameした ~/Documents/.vsconfig を 読み込みます。\n\n後はクリックするだけで、コンポーネント、機能拡張のinstall / uninstallが進んでいきます。"
  },
  {
    "objectID": "posts/2024/09/migrate-windows-env-w-winget.html#footnotes",
    "href": "posts/2024/09/migrate-windows-env-w-winget.html#footnotes",
    "title": "wingetとscoopでWindows環境を移行、Visual Studio環境の移行",
    "section": "脚注",
    "text": "脚注\n\n\n仮想環境台数分のライセンス買えばいいけど、その余裕はありません。↩︎"
  },
  {
    "objectID": "posts/2024/09/mariadb.html",
    "href": "posts/2024/09/mariadb.html",
    "title": "mariadb",
    "section": "",
    "text": "久々に mysql とか mariadb をいじっている。\n\nrootのpasswd変更\nとりあえず\nsudo mysql -u root -p\nしてから\nalter user 'root'@'localhost' IDENTIFIED BY \"*********\";\ncreate user 'matanuki'@'%' identified by '**********';\ngrant all on *.* to 'matanuki'@'%';\nflush privileges;\n\n\ntableでcheck制約\n最近のmariadbはcheck制約が可能になっているのが嬉しい。\nboolean型のcolumns Aはnot nullで、かつ、falseならば columns Bはnot nullでなくてはならない場合は\nCHECK (A = TRUE OR (A = FALSE AND B IS NOT NULL))\nと規定しておけばOK。"
  },
  {
    "objectID": "posts/2024/09/08.html",
    "href": "posts/2024/09/08.html",
    "title": "PowerPoint with quarto",
    "section": "",
    "text": "大学での講義のため、PowerPointを使ってスライドを作らねばならないことがある。\n動作は重いし、編集が面倒。\nというわけで、marpへの転向も検討したが、marpで作られるpptxファイルは編集が困難。\npandocでpptxに変換することもできるが、手になじまなかった。\nところが、quartoで pptxを作成できるそうだ。\nhttps://quarto.org/docs/projects/quarto-projects.htmlや https://quarto.org/docs/gallery/#presentations が参考になる。\n\n初手\nquarto create project \nする。"
  },
  {
    "objectID": "posts/2024/09/Last-Modified-js.html",
    "href": "posts/2024/09/Last-Modified-js.html",
    "title": "Last-Modified.js",
    "section": "",
    "text": "個人的には http headerのLast-Modified: 、便利だと思うのですが、動的コンテンツが持て囃されるためか、廃れましたね。\nquartoでも JavaScript で Last-Modified: をHTML bodyで表示するようにしてみました。\nquarto render して、HTMLが生成された時間が Last-Modified: になります。\n\n作った理由\n日本の医学系学会で一番会員数が多いであろう 日本内科学会 は 内科専門医試験や総合内科専門医試験の情報提供に 資格認定試験 というページを設けているのですが、一見しても隅々まで読んでも、いつ情報が更新されたのか分かりません。\nこれでは受験生が可哀想ではないでしょうか。\n他にも、内容は変わっていないのに、更新日の日付だけが変更される J-STAGE の 日本内科学会雑誌 トップページや、 http headerで現在時刻をLast-Modified: として返すコンテンツもあったりします。\n以前公開していた魔狸アンテナを再開するために現在コーディングを頑張っていますが、コンテンツ提供側の方々には、そのコンテンツの更新時間を明確にすることにも配慮して欲しいと思っています。\nGitHub Pages はLast-Modified: を返してくれるようですが、いつ仕様変更があるかは分かりません。\nNode.js /JavaScript/TypeScriptで擬似的にLast-Modified: を表示させれば良くない？と思いついたのは昨夜の入浴時でした。\n起床後にｻｻｻｯと書いてみました。\n後日整理して、GitHubで公開します。ご自由にお使い下さい。（ライセンス形態は未定です）\n\n\nまずは Last-Modified.js\n以下。quarto project dirのトップに置きます。 docs/にも配置する。\n// HTMLファイルの更新時間をJSTでHTTP_headerのLast-Modifiedフォーマットで表示するJavaScriptコード\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 最終更新日時を取得\n    var lastModified = new Date(document.lastModified);\n    \n    // JSTオフセットを設定（ミリ秒単位）\n    var jstOffset = 9 * 60 * 60 * 1000;\n    \n    // ローカル時間をJSTに変換\n    var jstTime = new Date(lastModified.getTime() + jstOffset);\n    \n    // 曜日の配列\n    var weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    \n    // 月の配列\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    \n    /d=\"last-modified\"&gt;&lt;/div&gt;/ フォーマットされた日時文字列を作成\n    var formattedDate = weekdays[jstTime.getUTCDay()] + \", \" +\n                        (\"0\" + jstTime.getUTCDate()).slice(-2) + \" \" +\n                        months[jstTime.getUTCMonth()] + \" \" +\n                        jstTime.getUTCFullYear() + \" \" +\n                        (\"0\" + jstTime.getUTCHours()).slice(-2) + \":\" +\n                        (\"0\" + jstTime.getUTCMinutes()).slice(-2) + \":\" +\n                        (\"0\" + jstTime.getUTCSeconds()).slice(-2) + \" JST\";\n    \n    // 表示する要素を取得\n    var displayElement = document.getElementById('last-modified');\n    \n    // 要素が存在する場合、内容を更新\n    if (displayElement) {\n        displayElement.textContent = 'Last-Modified: ' + formattedDate;\n    } else {\n        console.log('表示要素が見つかりません。');\n    }\n});\n\n\nqmd yaml\n以下を追加。\nformat:\n  html:\n    toc: true\n    include-in-header:\n      - text: |\n          &lt;script src=\"/Last-Modified.js\"&gt;&lt;/script&gt;\n\n\nqmd\nbodyに以下を記入。\n&lt;div id=\"last-modified\"&gt;&lt;/div&gt;\n\n\n結果"
  },
  {
    "objectID": "posts/2024/10/mozc4med_2024Oct25.html",
    "href": "posts/2024/10/mozc4med_2024Oct25.html",
    "title": "mozc4med",
    "section": "",
    "text": "電子カルテ端末の日本語変換の珍妙さで笑ってしまい、仕事が手につかない皆さんに朗報です。\nMozc"
  }
]